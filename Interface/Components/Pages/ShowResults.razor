    @page "/vote/{Token}"
    @using Interface.Models
    @using Interface.VoteStorage
    @inject IVoteService VoteService
    @inject NavigationManager NavigationManager

<PageTitle>Results</PageTitle>

<h1>Результаты голосования</h1>

@{
    var nonVotedShops = GetVotedAndNonVotedShops(out var votedShops);
    if (nonVotedShops.Count == 0)
    {
        <p>Все магазины проголосовали</p>
    }
    else
    {
        <p>Магазинов не проголосовало: @nonVotedShops.Count</p>

    }
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Название магазина</th>
                <th scope="col">Проголосовал</th>
                <th scope="col">Имена проголосовавших</th>
            </tr>
        </thead>

        <tbody>
            @for (int i = 0; i < _shops.Count; i++)
            {
                <tr>
                    <th scope="row">@(@i + 1)</th>
                    <td>@_shops[i]</td>
                    @if (votedShops.Contains(_shops[i]))
                    {
                        <td>
                            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-check-square" viewBox="0 0 16 16">
                                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                                <path d="M10.97 4.97a.75.75 0 0 1 1.071 1.05l-3.992 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425z" />
                            </svg>
                        </td>
                        <td>
                            @String.Join(", ", _voteResult.VoteResults.Where(x => x.Key == _shops[i]).Select(x => x.Value).SelectMany(x => x).ToList())
                        </td>
                    }
                    else
                    {
                        <td>
                            <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" class="bi bi-square" viewBox="0 0 16 16">
                                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z" />
                            </svg>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<string> _shops = new();
    private VoteEntity _voteResult = new();
    [Parameter]
    public string Token { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        _shops = VoteService.GetShopsNames();
        try
        {
            _voteResult = VoteService.GetVoteResult(Token);
        }
        catch
        {
            NavigationManager.NavigateTo("/error");
        }
    }

    private List<string> GetVotedAndNonVotedShops(out List<string> votedShops)
    {
        votedShops = _voteResult.VoteResults.Select(x => x.Key).ToList();
        var votedHash = votedShops.ToHashSet();
        var nonVotedShops = _shops
                            .Where(shop => !votedHash.Contains(shop))
                            .Select(shop => shop)
                            .ToList();

        return nonVotedShops;
    }
    }