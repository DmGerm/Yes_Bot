@page "/vote/{Token}"
@using Interface.Models
@using Interface.VoteStorage
@inject IVoteService VoteService 

<PageTitle>Results</PageTitle>

<h1>Результаты голосования</h1>

@{
    var nonVotedShops = GetVotedAndNonVotedShops(out var votedShops);
if (nonVotedShops.Count == 0)
    {
        <p>Все магазины проголосовали</p>
    }
    else
    {
        <p>Магазинов не проголосовало: @nonVotedShops.Count</p>

    }
    <table class="table">
     <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Название магазина</th>
    </tr>
  </thead>

  <tbody>
    @for (int i = 0; i < _shops.Count; i++)
  {
    <tr>
      <th scope="row">@i</th>
      <td>@_shops[i]</td>
    </tr>
  }
    </tbody>
    </table>
}



@code {
    private List<string> _shops = new();
    private VoteEntity _voteResult = new();
    [Parameter]
    public string Token { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        _shops = VoteService.GetShopsNames();
        _voteResult = VoteService.GetVoteResult(Token);
    }

    private List<string> GetVotedAndNonVotedShops(out List<string> votedShops)
    {
        votedShops = _voteResult.VoteResults.Select(x => x.Key).ToList();
        var votedHash = votedShops.ToHashSet();
        var nonVotedShops = _shops
                            .Where(shop => !votedHash.Contains(shop))
                            .Select(shop => shop)
                            .ToList();

        return nonVotedShops;
    }
}